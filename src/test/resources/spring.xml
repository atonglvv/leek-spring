<?xml version="1.0" encoding="UTF-8"?>
<beans>

    <bean id="userDao" class="cn.atong.leek.spring.test.bean.UserDao" init-method="initDataMethod" destroy-method="destroyDataMethod"/>

    <bean id="userService" class="cn.atong.leek.spring.test.bean.UserService">
        <property name="uId" value="10002"/>
        <property name="userDao" ref="userDao"/>
        <property name="userDaoFactoryBean" ref="proxyUserDao"/>
    </bean>

    <bean class="cn.atong.leek.spring.test.common.MyBeanFactoryPostProcessor"/>
    <bean class="cn.atong.leek.spring.test.common.MyBeanPostProcessor"/>

    <!--测试单例bean/原型bean-->
    <bean id="userScopeService" class="cn.atong.leek.spring.test.bean.UserScopeService" scope="prototype">
        <property name="name" value="atong"/>
    </bean>

    <!--测试FactoryBean-->
    <bean id="proxyUserDao" class="cn.atong.leek.spring.test.bean.ProxyBeanFactory"/>

    <!--事件监听器-->
    <bean class="cn.atong.leek.spring.test.event.ContextRefreshedEventListener"/>
    <bean class="cn.atong.leek.spring.test.event.CustomEventListener"/>
    <bean class="cn.atong.leek.spring.test.event.ContextClosedEventListener"/>

    <!--把AOP动态代理融入到Bean的声明周期-->
    <bean id="userAopService" class="cn.atong.leek.spring.test.bean.UserAopService"/>
    <bean class="cn.atong.leek.spring.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
    <bean id="beforeAdvice" class="cn.atong.leek.spring.test.bean.UserServiceBeforeAdvice"/>
    <bean id="methodInterceptor" class="cn.atong.leek.spring.aop.framework.adapter.MethodBeforeAdviceInterceptor">
        <property name="advice" ref="beforeAdvice"/>
    </bean>
    <bean id="pointcutAdvisor" class="cn.atong.leek.spring.aop.aspectj.AspectJExpressionPointcutAdvisor">
        <property name="expression" value="execution(* cn.atong.leek.spring.test.bean.IUserService.*(..))"/>
        <property name="advice" ref="methodInterceptor"/>
    </bean>
</beans>